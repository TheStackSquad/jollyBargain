// frontend/src/reduxStore/cart/cartSlice.js
import { createSlice } from '@reduxjs/toolkit';

/**
 * Initial state for the cart slice.
 * The cart will be an array of product objects, where each product
 * will also have a 'quantity' property added to it when added to the cart.
 * Example item structure in cart: { _id: '...', title: '...', price: ..., quantity: 1, images: [...] }
 */
const initialState = {
  items: [], // Array to hold cart items
};

/**
 * Creates a Redux slice for managing cart state.
 * Using `createSlice` from Redux Toolkit:
 * - Automatically generates action creators from reducer functions.
 * - Handles immutable updates internally using Immer.
 */
const cartSlice = createSlice({
  name: 'cart', // A name for the slice, used as a prefix for action types
  initialState,
  reducers: {
    /**
     * Adds a product to the cart or increments its quantity if it already exists.
     * @param {object} state - The current cart state (managed by Immer, so direct mutation is safe).
     * @param {object} action - The action object, action.payload should be the product object.
     */
    addItemToCart: (state, action) => {
      const product = action.payload;
      const existingItem = state.items.find(item => item._id === product._id);

      if (existingItem) {
        // If item exists, increment its quantity
        existingItem.quantity += 1;
      } else {
        // If item is new, add it with quantity 1
        state.items.push({ ...product, quantity: 1 });
      }
    },

    /**
     * Updates the quantity of a specific item in the cart.
     * @param {object} state - The current cart state.
     * @param {object} action - The action object, action.payload should be { id, delta }.
     * id: The _id of the product.
     * delta: The amount to change the quantity by (e.g., 1 or -1).
     */
    updateItemQuantity: (state, action) => {
      const { id, delta } = action.payload;
      const existingItem = state.items.find(item => item._id === id);

      if (existingItem) {
        existingItem.quantity += delta;
        // Remove item if quantity drops to 0 or below
        if (existingItem.quantity <= 0) {
          state.items = state.items.filter(item => item._id !== id);
        }
      }
    },

    /**
     * Removes an item completely from the cart.
     * @param {object} state - The current cart state.
     * @param {object} action - The action object, action.payload should be the _id of the product.
     */
    removeItemFromCart: (state, action) => {
      const idToRemove = action.payload;
      state.items = state.items.filter(item => item._id !== idToRemove);
    },

    /**
     * Clears all items from the cart.
     * @param {object} state - The current cart state.
     */
    clearCart: (state) => {
      state.items = [];
    },

    // Note: 'saveForLater' logic might involve moving an item to a different
    // part of the state (e.g., a 'savedItems' array in the user slice, or a separate slice).
    // For now, if it just means removing from cart, removeItemFromCart can be used.
    // If it means moving to a 'saved for later' list, that state would need to be defined elsewhere.
  },
});

// Export the action creators generated by createSlice
export const { addItemToCart, updateItemQuantity, removeItemFromCart, clearCart } = cartSlice.actions;

// Export the reducer function to be combined in the store
export default cartSlice.reducer;
